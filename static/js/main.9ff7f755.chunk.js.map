{"version":3,"sources":["components/ImageCard.js","components/ImageSearch.js","App.js","index.js"],"names":["ImageCard","image","tags","split","className","src","webformatURL","alt","user","views","downloads","likes","map","tag","index","key","ImageSearch","searchText","useState","text","setText","onSubmit","e","prevenDefault","onChange","target","value","type","placeholder","App","images","setImages","isLoading","setIsLoading","term","setTerm","useEffect","fetch","process","then","res","json","data","hits","catch","err","console","log","length","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAqCeA,EAnCG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACXC,EAAOD,EAAMC,KAAKC,MAAM,KAG9B,OACI,yBAAKC,UAAU,8CACX,yBAAKC,IAAKJ,EAAMK,aAAcC,IAAI,GAAGH,UAAU,WAC/C,yBAAKA,UAAU,aACX,yBAAKA,UAAU,0CAAf,YACcH,EAAMO,MAEpB,4BACI,4BACI,0CADJ,IAC6BP,EAAMQ,OAEnC,4BACI,8CADJ,IACiCR,EAAMS,WAEvC,4BACI,0CADJ,IAC6BT,EAAMU,SAI3C,yBAAKP,UAAU,aACVF,EAAKU,KAAI,SAACC,EAAKC,GAAN,OACN,0BAAMC,IAAKD,EAAOV,UAAU,4FAA5B,IACMS,SCLXG,EArBK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACZC,mBAAS,IADG,mBAC7BC,EAD6B,KACvBC,EADuB,KAQpC,OACI,yBAAKhB,UAAU,kDACX,0BAAMiB,SAPG,SAACC,GACdA,EAAEC,gBACFN,EAAWE,IAKmBf,UAAU,mBAChC,yBAAKA,UAAU,8DACX,2BAAOoB,SAAU,SAAAF,GAAC,OAAIF,EAAQE,EAAEG,OAAOC,QAAQtB,UAAU,kHAAkHuB,KAAK,OAAOC,YAAY,0BACnM,4BAAQxB,UAAU,kIAAkIuB,KAAK,UAAzJ,cCmBLE,MA9Bf,WAAgB,IAAD,EACeX,mBAAS,IADxB,mBACNY,EADM,KACEC,EADF,OAEqBb,oBAAS,GAF9B,mBAENc,EAFM,KAEKC,EAFL,OAGWf,mBAAS,IAHpB,mBAGNgB,EAHM,KAGAC,EAHA,KAeb,OAVAC,qBAAU,WACRC,MAAM,gCAAD,OAAiCC,qCAAjC,cAA4EJ,EAA5E,kCACFK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJX,EAAUW,EAAKC,MACfV,GAAa,MAEdW,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAC3B,CAACX,IAGF,yBAAK9B,UAAU,qBACb,kBAAC,EAAD,CAAaa,WAAY,SAACE,GAAD,OAAUgB,EAAQhB,OAEzCa,GAA+B,IAAlBF,EAAOkB,QAAgB,wBAAI5C,UAAU,sCAAd,mBAErC4B,EAAY,wBAAI5B,UAAU,sCAAd,cAAqE,yBAAKA,UAAU,0BAC9F0B,EAAOlB,KAAI,SAAAX,GAAK,OACf,kBAAC,EAAD,CAAWc,IAAKd,EAAMgD,GAAIhD,MAAOA,UCtB3CiD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.9ff7f755.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ImageCard = ({ image }) => {\r\n    const tags = image.tags.split(',');\r\n\r\n\r\n    return (\r\n        <div className=\"max-w-sm rounded overflow-hidden shadow-lg\">\r\n            <img src={image.webformatURL} alt=\"\" className=\"w-full\" />\r\n            <div className=\"px-6 py-4\">\r\n                <div className=\"font-bold text-purple-500 text-xl mb-2\">\r\n                    Photo by {image.user}\r\n                </div>\r\n                <ul>\r\n                    <li>\r\n                        <strong>Views:</strong> {image.views}\r\n                    </li>\r\n                    <li>\r\n                        <strong>Downloads:</strong> {image.downloads}\r\n                    </li>\r\n                    <li>\r\n                        <strong>Likes:</strong> {image.likes}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"px-6 py-4\">\r\n                {tags.map((tag, index) => (\r\n                    <span key={index} className=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2\">\r\n                        #{tag}\r\n                    </span>\r\n\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageCard;\r\n","import React, { useState } from 'react';\r\n\r\nconst ImageSearch = ({ searchText }) => {\r\n    const [text, setText] = useState('');\r\n\r\n    const onSubmit = (e) => {\r\n        e.prevenDefault();\r\n        searchText(text);\r\n    }\r\n\r\n    return (\r\n        <div className='max-w-sm rounded overflow-hidden my-10 mx-auto'>\r\n            <form onSubmit={onSubmit} className=\"w-full max-w-sm\">\r\n                <div className=\"flex items-center border-b border-b-2 border-teal-500 py-2\">\r\n                    <input onChange={e => setText(e.target.value)} className='appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none' type=\"text\" placeholder='Search Image Term ...' />\r\n                    <button className='flex-shrink-0 bg-teal-500 hover:bg-teal-700 border-teal-500 hover:border-teal-700 text-sm border-4 text-white py-1 px-2 rounded' type='submit'>Search\r\n                </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageSearch;\r\n","import React, { useState, useEffect } from 'react';\nimport ImageCard from './components/ImageCard';\nimport ImageSearch from './components/ImageSearch';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [term, setTerm] = useState('');\n\n  useEffect(() => {\n    fetch(`https://pixabay.com/api/?key=${process.env.REACT_APP_PIXABAY_API_KEY}&q=${term}&image_type=photo&pretty=true`)\n      .then(res => res.json())\n      .then(data => {\n        setImages(data.hits);\n        setIsLoading(false);\n      })\n      .catch(err => console.log(err));\n  }, [term]);\n\n  return (\n    <div className=\"container mx-auto\">\n      <ImageSearch searchText={(text) => setTerm(text)} />\n\n      {!isLoading && images.length === 0 && <h1 className=\"text-5xl text-center mx-auto mt-32\">No Images Found</h1>}\n\n      {isLoading ? <h1 className=\"text-6xl text-center mx-auto mt-32\">Loading...</h1> : <div className=\"grid grid-cols-3 gap-4\">\n        {images.map(image => (\n          <ImageCard key={image.id} image={image} />\n        ))}\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/main.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}